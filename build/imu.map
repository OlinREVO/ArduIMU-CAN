Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o (exit)
/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                              build/uart.o (__do_clear_bss)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)
                              build/uart.o (malloc)
/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o) (__do_copy_data)

Allocating common symbols
Common symbol       size              file

TX_end              0x2               build/uart.o
TX_write            0x2               build/uart.o
__brkval            0x2               /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)
TX_read             0x2               build/uart.o
transmitting        0x2               build/uart.o
TX_begin            0x2               build/uart.o
__flp               0x2               /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o
LOAD build/imu.o
LOAD build/api.o
LOAD build/uart.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x758
 *(.vectors)
 .vectors       0x0000000000000000       0x7c /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x000000000000007c                . = ALIGN (0x2)
                0x000000000000007c                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x000000000000007c        0x0 linker stubs
 *(.trampolines*)
                0x000000000000007c                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x000000000000007c                __ctors_start = .
 *(.ctors)
                0x000000000000007c                __ctors_end = .
                0x000000000000007c                __dtors_start = .
 *(.dtors)
                0x000000000000007c                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x000000000000007c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o
                0x000000000000007c                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x000000000000007c        0xc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000088       0x10 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                0x0000000000000088                __do_clear_bss
 .init4         0x0000000000000098       0x16 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
                0x0000000000000098                __do_copy_data
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000ae        0x8 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o
 *(.init9)
 *(.text)
 .text          0x00000000000000b6        0x4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o
                0x00000000000000b6                __vector_22
                0x00000000000000b6                __vector_28
                0x00000000000000b6                __vector_1
                0x00000000000000b6                __vector_24
                0x00000000000000b6                __vector_12
                0x00000000000000b6                __bad_interrupt
                0x00000000000000b6                __vector_6
                0x00000000000000b6                __vector_3
                0x00000000000000b6                __vector_23
                0x00000000000000b6                __vector_30
                0x00000000000000b6                __vector_25
                0x00000000000000b6                __vector_11
                0x00000000000000b6                __vector_13
                0x00000000000000b6                __vector_17
                0x00000000000000b6                __vector_19
                0x00000000000000b6                __vector_7
                0x00000000000000b6                __vector_27
                0x00000000000000b6                __vector_5
                0x00000000000000b6                __vector_4
                0x00000000000000b6                __vector_9
                0x00000000000000b6                __vector_2
                0x00000000000000b6                __vector_21
                0x00000000000000b6                __vector_15
                0x00000000000000b6                __vector_29
                0x00000000000000b6                __vector_8
                0x00000000000000b6                __vector_26
                0x00000000000000b6                __vector_14
                0x00000000000000b6                __vector_10
                0x00000000000000b6                __vector_16
 .text          0x00000000000000ba        0x0 build/imu.o
 .text          0x00000000000000ba      0x26e build/api.o
                0x00000000000000ba                initCAN
                0x000000000000014c                readMsg
                0x0000000000000204                sendCANmsg
                0x000000000000028e                __vector_18
 .text          0x0000000000000328      0x1de build/uart.o
                0x0000000000000328                initUART
                0x0000000000000388                endUART
                0x00000000000003a2                __vector_20
                0x000000000000042e                UART_transmit
                0x0000000000000498                UART_putString
 .text          0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text          0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text          0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)
 .text          0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
                0x0000000000000506                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc.mul
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x0000000000000506        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x0000000000000506      0x24e /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)
                0x0000000000000506                malloc
                0x0000000000000636                free
 .text.libgcc.mul
                0x0000000000000754        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x0000000000000754        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000754        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x0000000000000754        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x0000000000000754        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x0000000000000754        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x0000000000000754        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
                0x0000000000000754                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000754        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
                0x0000000000000754                exit
                0x0000000000000754                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000754        0x4 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000000758                _etext = .

.data           0x0000000000800100        0x6 load address 0x0000000000000758
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o
 .data          0x0000000000800100        0x0 build/imu.o
 .data          0x0000000000800100        0x0 build/api.o
 .data          0x0000000000800100        0x0 build/uart.o
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .data          0x0000000000800100        0x6 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)
                0x0000000000800100                __malloc_heap_end
                0x0000000000800102                __malloc_heap_start
                0x0000000000800104                __malloc_margin
 .data          0x0000000000800106        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800106                . = ALIGN (0x2)
                0x0000000000800106                _edata = .
                0x0000000000800106                PROVIDE (__data_end, .)

.bss            0x0000000000800106        0xe
                0x0000000000800106                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o
 .bss           0x0000000000800106        0x0 build/imu.o
 .bss           0x0000000000800106        0x0 build/api.o
 .bss           0x0000000000800106        0x0 build/uart.o
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800106        0xa build/uart.o
                0x0000000000800106                TX_end
                0x0000000000800108                TX_write
                0x000000000080010a                TX_read
                0x000000000080010c                transmitting
                0x000000000080010e                TX_begin
 COMMON         0x0000000000800110        0x4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)
                0x0000000000800110                __brkval
                0x0000000000800112                __flp
                0x0000000000800114                PROVIDE (__bss_end, .)
                0x0000000000000758                __data_load_start = LOADADDR (.data)
                0x000000000000075e                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800114        0x0
                0x0000000000800114                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800114                PROVIDE (__noinit_end, .)
                0x0000000000800114                _end = .
                0x0000000000800114                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000     0x21a8
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o
 .stab          0x00000000000006cc      0x264 build/imu.o
                                        0x270 (size before relaxing)
 .stab          0x0000000000000930      0x990 build/api.o
                                        0x99c (size before relaxing)
 .stab          0x00000000000012c0      0x630 build/uart.o
                                        0x84c (size before relaxing)
 .stab          0x00000000000018f0      0x8b8 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)
                                        0x8e8 (size before relaxing)

.stabstr        0x0000000000000000     0x13fe
 *(.stabstr)
 .stabstr       0x0000000000000000     0x13fe /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm16m1.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 build/imu.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 build/api.o
 .comment       0x0000000000000000       0x12 build/uart.o
 .comment       0x0000000000000000       0x12 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(malloc.o)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(build/imu.elf elf32-avr)
LOAD linker stubs
